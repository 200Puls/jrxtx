
project.ext {

  cfgJavaVersion = '1.5'

  cfgVersion = '0.0.2-SNAPSHOT'
  
  cfgGroup = 'org.openmuc'

  cfgCopyDependencies = false

  cfgCopyToRoot = false

  cfgSignPom = true

  cfgRepository = project.properties.sonatypeRepository

  cfgSnapshotRepository = project.properties.sonatypeSnapshotRepository

  cfgRepositoryUser = project.properties.sonatypeUser

  cfgRepositoryPass = project.properties.sonatypePass

  javaProjects = allprojects

  distributionProjects = javaProjects

  docProjects = javaProjects

  repositoryProjects = javaProjects
}

tasks.withType(Tar) {

  into(project.name) {
    from('./') {
      include 'build.gradle'
      include 'configuration.gradle'
      include 'license/**'
      include 'doc/*.txt'
      include 'doc/userguide/' + project.name + '-doc*.html'
      include 'doc/userguide/' + project.name + '-doc-img/**'
      include 'run-scripts/**'
      include 'gradle/wrapper/**'
      include 'gradlew'
      include 'gradlew.bat'
      include 'build/libs/**'
      include 'build/docs/javadoc/**'
      include 'src/**'
      include 'native/**'
      include 'README'
    }
  }
}

tasks.withType(Test) {
  systemProperty "java.library.path", "native/x86_64-unknown-linux-gnu/.libs/:/usr/lib/jni/"
}



//------------------project specific configurations--------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'signing'


jar {
  manifest {
    name = 'jRxTx'
    instruction 'Export-Package', '!*.internal.*,*'
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      pom.project {
        name 'jRxTx'
        description 'jRxTx is a library for Java serial communication.'
        
        licenses {
          license {
            name 'GNU Lesser General Public License'
            url 'http://www.gnu.org/licenses/lgpl-2.1.html'
            distribution 'repo'
          }
        }
      }
    }
  }
}

jar {
  manifest { // the manifest of the default jar is of type OsgiManifest
    instruction 'Import-Package', '!gnu.io.internal.*, *'
  }
}

dependencies {
  testCompile 'org.mockito:mockito-core:1.10.19'
  testCompile 'org.powermock:powermock-api-mockito:1.6.4' 
  testCompile 'org.powermock:powermock-module-junit4:1.6.2' 

}

task javah(dependsOn: compileJava) << {
  def Nclasses = [	
    'gnu.io.RXTXCommDriver',
    'gnu.io.CommPortIdentifier',
    'gnu.io.RXTXVersion',
    'gnu.io.I2C',
    'gnu.io.LPRPort',
    'gnu.io.RXTXPort',
    'gnu.io.Zystem',
    'gnu.io.Raw',
    'gnu.io.RS485',
    'gnu.io.ParallelPort'
  ];
    
  def nativeIncludes = 'native/src/include'
  def classpath = sourceSets.main.output.classesDir
  for (Nclass in Nclasses) {
      
    logger.info('Generating header for ' + Nclass)
      
    exec {
	  executable "javah"
	  args "-d", "$nativeIncludes", "-classpath", "$classpath" , Nclass
    }
  }
}
