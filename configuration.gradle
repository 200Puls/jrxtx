
project.ext {

  cfgJavaVersion = "7"

  cfgVersion = "0.0.2-SNAPSHOT"
  
  cfgGroup = "org.openmuc"

  cfgCopyDependencies = false

  cfgCopyToRoot = false

  cfgSignPom = true

  cfgRepository = project.properties.sonatypeRepository

  cfgSnapshotRepository = project.properties.sonatypeSnapshotRepository

  cfgRepositoryUser = project.properties.sonatypeUser

  cfgRepositoryPass = project.properties.sonatypePass

  javaProjects = allprojects

  distributionProjects = javaProjects

  docProjects = javaProjects

  repositoryProjects = javaProjects
}

tasks.withType(Tar) {

  into(project.name) {
    from("./") {
      include "build.gradle"
      include "configuration.gradle"
      include "license/**"
      include "doc/*.txt"
      include "doc/userguide/" + project.name + "-doc*.html"
      include "doc/userguide/" + project.name + "-doc-img/**"
      include "run-scripts/**"
      include "gradle/wrapper/**"
      include "gradlew"
      include "gradlew.bat"
      include "build/libs/**"
      include "build/docs/javadoc/**"
      include "src/**"
      include "native/**"
      include "README"
    }
  }
}

tasks.withType(Test) {
  systemProperty "java.library.path", "native/x86_64-unknown-linux-gnu/.libs/:/usr/lib/jni/"
}



//------------------project specific configurations--------------------

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "osgi"
apply plugin: "maven"
apply plugin: "signing"


jar {
  manifest {
    name = "jRxTx"
    instruction "Export-Package", "!*.internal.*,*"
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      pom.project {
        name "jRxTx"
        description "jRxTx is a library for Java serial communication."
        
        licenses {
          license {
            name "GNU Lesser General Public License"
            url "http://www.gnu.org/licenses/lgpl-2.1.html"
            distribution "repo"
          }
        }
      }
    }
  }
}

jar {
  manifest { // the manifest of the default jar is of type OsgiManifest
    instruction "Import-Package", "!gnu.io.internal.*, *"
  }
}

dependencies {
  testCompile "org.mockito:mockito-core:1.10.19"
  testCompile "org.powermock:powermock-api-mockito:1.6.4" 
  testCompile "org.powermock:powermock-module-junit4:1.6.2" 

}

sourceSets {
	main {
		resources {
			includes = ["**/*.so","**/*.dll", "**/*.jnilib","**/*.properties"]
		}
	}
}


task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
    destinationDir file("$buildDir/native-libs")
    baseName "native-libs"
    extension "jar"
    from fileTree(dir: "libs", include: "**/*.so")
    into "native/"
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(nativeLibsToJar)
}

task javah(dependsOn: compileJava) << {
  def Nclasses = [	
    'org.openmuc.serialio.SerialPort',
  ];
    
  def nativeIncludes = "native/src/jni"
  def classpath = sourceSets.main.output.classesDir
  for (Nclass in Nclasses) {
      
    logger.info("Generating header for " + Nclass)
      
    exec {
	  executable "javah"
	  args "-d", "$nativeIncludes", "-classpath", "$classpath" , Nclass
    }
  }
}
